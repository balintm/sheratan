## \file tools/configure.jam
## \brief Project configuration.
## \ingroup tools
## \author Marek Balint \c (mareq[A]balint[D]eu)


import "class" : new ;
import type ;
import feature ;
import generate ;
import errors ;


# declare new feature <target-layout>
feature.feature target-layout : gnu debian rpm : propagated ;

# register Jamfile type (project-config.jam is Jamfile)
type.register JAMFILE : jam ;

# rule for creation configuration jamfile
rule project-config ( project-root )
{
  local target-name = "$(project-root)/project-config.jam" ;

  generate $(target-name)
    : #sources
        # there are no sources (see internal error in rule generating-rule)
    : #requirements
        <generating-rule>@tools/configure.generating-rule
    : #default-build
    : #usage-requirements
  ;
}

# auxiliary rule doing actual work (called by rule make in rule project-config)
rule generating-rule ( project name : property-set : sources * )
{
  if $(sources) {
    errors.error "No sources for target '$(name)' allowed!!! (INTERNAL ERROR)" ;
  }

  # create generating action (it has to be passed as one of parameters into target's constructor and it specifies generating command)
  local action  = [
    new non-scanning-action $(sources)
      : #action-name
          tools/configure.generate-project-config
      : #property-set
          $(property-set)
  ] ;

  # create target for the source
  local target = [
    new file-target $(name:B)
      : #type
          JAMFILE
      : #project
          $(project)
      : #action
          $(action)
      : #path
          $(name:D)
  ] ;

  # always rebuild target
  $(target).always ;

  # return created target
  return $(target) ;
}

# rule doing the actual work of generating project-config.jam file
rule generate-project-config ( target : sources * : properties * )
{
  # target OS
  local target-os = [ feature.get-values <target-os> : $(properties) ] ;
  TARGET_OS on $(target) = $(target-os) ;

  # target layout
  local target-layout = [ feature.get-values <target-layout> : $(properties) ] ;
  TARGET_LAYOUT on $(target) = $(target-layout) ;

  import tools/layouts/$(target-layout) ;
  tools/layouts/$(target-layout).init-paths $(target) ;
}
actions generate-project-config
{
  echo "################################################################################" > $(<)
  echo "#                                                                              #" >> $(<)
  echo "#   This file was automatically generated by build system. Do not modify it.   #" >> $(<)
  echo "#   Execute bjam --configure from command line with appropriate arguments      #" >> $(<)
  echo "#   instead. Execute bjam --help for more information.                         #" >> $(<)
  echo "#                                                                              #" >> $(<)
  echo "################################################################################" >> $(<)
  echo "" >> $(<)
  echo "" >> $(<)
  echo "# target system" >> $(<)
  echo "constant TARGET_OS : $(TARGET_OS) ;" >> $(<)
  echo "constant TARGET_LAYOUT : $(TARGET_LAYOUT) ;" >> $(<)
  echo "" >> $(<)
  echo "# system directory names" >> $(<)
  echo "constant DIR_USR : \"$(DIR_USR)\" ;" >> $(<)
  echo "constant DIR_BIN : \"$(DIR_BIN)\" ;" >> $(<)
  echo "constant DIR_SBIN : \"$(DIR_SBIN)\" ;" >> $(<)
  echo "constant DIR_LIB : \"$(DIR_LIB)\" ;" >> $(<)
  echo "constant DIR_LIBEXEC : \"$(DIR_LIBEXEC)\" ;" >> $(<)
  echo "constant DIR_INCLUDE : \"$(DIR_INCLUDE)\" ;" >> $(<)
  echo "constant DIR_SHARE : \"$(DIR_SHARE)\" ;" >> $(<)
  echo "constant DIR_MAN : \"$(DIR_MAN)\" ;" >> $(<)
  echo "constant DIR_INFO : \"$(DIR_INFO)\" ;" >> $(<)
  echo "constant DIR_LOCALE : \"$(DIR_LOCALE)\" ;" >> $(<)
  echo "constant DIR_ETC : \"$(DIR_ETC)\" ;" >> $(<)
  echo "constant DIR_VAR : \"$(DIR_VAR)\" ;" >> $(<)
  echo "constant DIR_RUN : \"$(DIR_RUN)\" ;" >> $(<)
  echo "constant DIR_LOCK : \"$(DIR_LOCK)\" ;" >> $(<)
  echo "constant DIR_LOG : \"$(DIR_LOG)\" ;" >> $(<)
  echo "" >> $(<)
  echo "# system paths" >> $(<)
  echo "path-constant PATH_PREFIX : \"$(PATH_PREFIX)/\" ;" >> $(<)
  echo "path-constant PATH_EXEC_PREFIX : \"$(PATH_EXEC_PREFIX)/\" ;" >> $(<)
  echo "path-constant PATH_BIN : \"$(PATH_BIN)/\" ;" >> $(<)
  echo "path-constant PATH_SBIN : \"$(PATH_SBIN)/\" ;" >> $(<)
  echo "path-constant PATH_LIB : \"$(PATH_LIB)/\" ;" >> $(<)
  echo "path-constant PATH_LIBEXEC : \"$(PATH_LIBEXEC)/\" ;" >> $(<)
  echo "path-constant PATH_INCLUDE : \"$(PATH_INCLUDE)/\" ;" >> $(<)
  echo "path-constant PATH_DATA : \"$(PATH_DATA)/\" ;" >> $(<)
  echo "path-constant PATH_MAN : \"$(PATH_MAN)/\" ;" >> $(<)
  echo "path-constant PATH_INFO : \"$(PATH_INFO)/\" ;" >> $(<)
  echo "path-constant PATH_LOCALE : \"$(PATH_LOCALE)/\" ;" >> $(<)
  echo "path-constant PATH_SYSCONF : \"$(PATH_SYSCONF)/\" ;" >> $(<)
  echo "path-constant PATH_LOCALSTATE : \"$(PATH_LOCALSTATE)/\" ;" >> $(<)
  echo "path-constant PATH_RUNTIME : \"$(PATH_RUNTIME)/\" ;" >> $(<)
  echo "path-constant PATH_LOCK : \"$(PATH_LOCK)/\" ;" >> $(<)
  echo "path-constant PATH_LOG : \"$(PATH_LOG)/\" ;" >> $(<)
  echo "" >> $(<)
  echo "" >> $(<)
  echo "# vim: set ts=2 sw=2 et:" >> $(<)
  echo "" >> $(<)
  echo "" >> $(<)
  echo "...project configuration has been saved to file '$(<)'..." ;
}


# vim: set ts=2 sw=2 et:


